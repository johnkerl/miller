Cookbook part 3: Stats with and without out-of-stream variables
================================================================

Overview
----------------------------------------------------------------

One of Miller's strengths is its compact notation: for example, given input of the form

GENRST_RUN_COMMAND
head -n 5 ../data/medium
GENRST_EOF

you can simply do

GENRST_RUN_COMMAND
mlr --oxtab stats1 -a sum -f x ../data/medium
GENRST_EOF

or

GENRST_RUN_COMMAND
mlr --opprint stats1 -a sum -f x -g b ../data/medium
GENRST_EOF

rather than the more tedious

GENRST_INCLUDE_AND_RUN_ESCAPED(oosvar-example-sum.sh)

or

GENRST_INCLUDE_AND_RUN_ESCAPED(oosvar-example-sum-grouped.sh)

The former (``mlr stats1`` et al.) has the advantages of being easier to type, being less error-prone to type, and running faster.

Nonetheless, out-of-stream variables (which I whimsically call *oosvars*), begin/end blocks, and emit statements give you the ability to implement logic -- if you wish to do so -- which isn't present in other Miller verbs.  (If you find yourself often using the same out-of-stream-variable logic over and over, please file a request at https://github.com/johnkerl/miller/issues to get it implemented directly in Go as a Miller verb of its own.)

The following examples compute some things using oosvars which are already computable using Miller verbs, by way of providing food for thought.

Mean without/with oosvars
----------------------------------------------------------------

GENRST_RUN_COMMAND
mlr --opprint stats1 -a mean -f x data/medium
GENRST_EOF

GENRST_INCLUDE_AND_RUN_ESCAPED(data/mean-with-oosvars.sh)

Keyed mean without/with oosvars
----------------------------------------------------------------

GENRST_RUN_COMMAND
mlr --opprint stats1 -a mean -f x -g a,b data/medium
GENRST_EOF

GENRST_INCLUDE_AND_RUN_ESCAPED(data/keyed-mean-with-oosvars.sh)

Variance and standard deviation without/with oosvars
----------------------------------------------------------------

GENRST_RUN_COMMAND
mlr --oxtab stats1 -a count,sum,mean,var,stddev -f x data/medium
GENRST_EOF

GENRST_RUN_COMMAND
cat variance.mlr
GENRST_EOF

GENRST_RUN_COMMAND
mlr --oxtab put -q -f variance.mlr data/medium
GENRST_EOF

You can also do this keyed, of course, imitating the keyed-mean example above.

Min/max without/with oosvars
----------------------------------------------------------------

GENRST_RUN_COMMAND
mlr --oxtab stats1 -a min,max -f x data/medium
GENRST_EOF

GENRST_RUN_COMMAND
mlr --oxtab put -q '
  @x_min = min(@x_min, $x);
  @x_max = max(@x_max, $x);
  end{emitf @x_min, @x_max}
' data/medium
GENRST_EOF

Keyed min/max without/with oosvars
----------------------------------------------------------------

GENRST_RUN_COMMAND
mlr --opprint stats1 -a min,max -f x -g a data/medium
GENRST_EOF

GENRST_INCLUDE_AND_RUN_ESCAPED(data/keyed-min-max-with-oosvars.sh)

Delta without/with oosvars
----------------------------------------------------------------

GENRST_RUN_COMMAND
mlr --opprint step -a delta -f x data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr --opprint put '
  $x_delta = is_present(@last) ? $x - @last : 0;
  @last = $x
' data/small
GENRST_EOF

Keyed delta without/with oosvars
----------------------------------------------------------------

GENRST_RUN_COMMAND
mlr --opprint step -a delta -f x -g a data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr --opprint put '
  $x_delta = is_present(@last[$a]) ? $x - @last[$a] : 0;
  @last[$a]=$x
' data/small
GENRST_EOF

Exponentially weighted moving averages without/with oosvars
----------------------------------------------------------------

GENRST_INCLUDE_AND_RUN_ESCAPED(verb-example-ewma.sh)

GENRST_INCLUDE_AND_RUN_ESCAPED(oosvar-example-ewma.sh)
