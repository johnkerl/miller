# Sorting

## TBD

## TBD

## TBD

```
mlr --from s --ojson put '
  func forward(a,b) {
    return a <=> b
  }
  func reverse(a,b) {
    return b <=> a
  }
  func even_then_odd(a,b) {
    ax = a % 2;
    bx = b % 2;
    if (ax == bx) {
      return a <=> b
    } elif (bx == 1) {
      return -1
    } else {
      return 1
    }
  }
  $aa = sortaf([5,2,4,1,3], "forward");
  $bb = sortaf([5,2,4,1,3], "reverse");
  $cc = sortaf([$a, $b],  "forward");
  $dd = sortaf([$a, $b],  "reverse");
  $ee = sortaf([7, 0, 4, 2, 1, 9, 3, 8, 6, 5], "even_then_odd")
'
```

docpg: sort-in-row as well as sort-records-at-end.

* doc sorta, sortmk, sortaf, sortmf
* why call-UDF-by-name (no 1st-class for now, too much work -- so sortaf(a, "f") not sortaf(a, f))

also: example for sortaf/sortmf of structs ...

## TBD

```
mlr --opprint --from s put -q '
  begin {
    @records = []
  }
  func f(a,b) {
    return a.x+a.y <=> b.x+b.y
  }

  @records[NR] = $*;
  end {
    @records = sortaf(@records, "f");
    for (_, record in @records) {
      emit record;
    }
  }
' then put '$z=$x+$y'
```
