# CSV, with and without headers

## Headerless CSV on input or output

Sometimes we get CSV files which lack a header. For example, [data/headerless.csv](./data/headerless.csv):

GENMD_RUN_COMMAND
cat data/headerless.csv
GENMD_EOF

You can use Miller to add a header. The `--implicit-csv-header` applies positionally indexed labels:

GENMD_RUN_COMMAND
mlr --csv --implicit-csv-header cat data/headerless.csv
GENMD_EOF

Following that, you can rename the positionally indexed labels to names with meaning for your context.  For example:

GENMD_RUN_COMMAND
mlr --csv --implicit-csv-header label name,age,status data/headerless.csv
GENMD_EOF

Likewise, if you need to produce CSV which is lacking its header, you can pipe Miller's output to the system command `sed 1d`, or you can use Miller's `--headerless-csv-output` option:

GENMD_RUN_COMMAND
head -5 data/colored-shapes.dkvp | mlr --ocsv cat
GENMD_EOF

GENMD_RUN_COMMAND
head -5 data/colored-shapes.dkvp | mlr --ocsv --headerless-csv-output cat
GENMD_EOF

Lastly, often we say "CSV" or "TSV" when we have positionally indexed data in columns which are separated by commas or tabs, respectively. In this case it's perhaps simpler to **just use NIDX format** which was designed for this purpose. (See also [File Formats](file-formats.md).) For example:

GENMD_RUN_COMMAND
mlr --inidx --ifs comma --oxtab cut -f 1,3 data/headerless.csv
GENMD_EOF

## Headerless CSV with duplicate field values

Miller is (by central design) a mapping from name to value, rather than integer position to value as in most tools in the Unix toolkit such as `sort`, `cut`, `awk`, etc. So given input `Yea=1,Yea=2` on the same input line, first `Yea=1` is stored, then updated with `Yea=2`. This is in the input-parser and the value `Yea=1` is unavailable to any further processing. The following example line comes from a headerless CSV file and includes 5 times the string (value) `'NA'`:

GENMD_CARDIFY_HIGHLIGHT_ONE
ag '0.9' nas.csv | head -1
2:-349801.10097848,4537221.43295653,2,1,NA,NA,NA,NA,NA
GENMD_EOF

The repeated `'NA'` strings (values) in the same line will be treated as fields (columns) with same name, thus only one is kept in the output.

This can be worked around by telling `mlr` that there is no header row by using `--implicit-csv-header` or changing the input format by using `nidx` like so:

GENMD_CARDIFY
ag '0.9' nas.csv | mlr --n2c --fs "," label xsn,ysn,x,y,t,a,e29,e31,e32 then head
GENMD_EOF

## Regularizing ragged CSV

Miller handles compliant CSV: in particular, it's an error if the number of data fields in a given data line don't match the number of header lines. But in the event that you have a CSV file in which some lines have less than the full number of fields, you can use Miller to pad them out. The trick is to use NIDX format, for which each line stands on its own without respect to a header line.

GENMD_RUN_COMMAND
cat data/ragged.csv
GENMD_EOF

GENMD_RUN_COMMAND
mlr --from data/ragged.csv --fs comma --nidx put '
  @maxnf = max(@maxnf, NF);
  @nf = NF;
  while(@nf < @maxnf) {
    @nf += 1;
    $[@nf] = ""
  }
'
GENMD_EOF

or, more simply,

GENMD_RUN_COMMAND
mlr --from data/ragged.csv --fs comma --nidx put '
  @maxnf = max(@maxnf, NF);
  while(NF < @maxnf) {
    $[NF+1] = "";
  }
'
GENMD_EOF
