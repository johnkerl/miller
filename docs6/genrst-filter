#!/usr/bin/env ruby

$us = File.basename $0

require 'getoptlong'
require 'fileutils'
require 'json'

# ----------------------------------------------------------------
# This is used to run live code for Miller Sphinx docs.
# * Edit foo.rst.in
# * Run this script to generate foo.rst
# * The caller should chmod 400 the foo.rst file
# * See README.md for more information.

def main
  input_handle = $stdin
  output_handle = $stdout

  output_handle.puts("..")
  output_handle.puts("    PLEASE DO NOT EDIT DIRECTLY. EDIT THE .rst.in FILE PLEASE.")
  output_handle.puts("")

  while true
    begin
      content_line = input_handle.readline

      if content_line =~ /^GENRST_RUN_COMMAND$/
        cmd_lines = read_until_genrst_eof(input_handle)
        run_command(cmd_lines, output_handle)

      elsif content_line =~ /^GENRST_CARDIFY$/
        lines = read_until_genrst_eof(input_handle)
        write_card([], lines, output_handle)

      elsif content_line =~ /^GENRST_CARDIFY_HIGHLIGHT_ONE$/
        lines = read_until_genrst_eof(input_handle)
        line1 = lines.shift
        write_card([line1], lines, output_handle)

      elsif content_line =~ /^GENRST_RUN_COMMAND_TOLERATING_ERROR$/
        cmd_lines = read_until_genrst_eof(input_handle)
        run_command_tolerating_error(cmd_lines, output_handle)

      elsif content_line =~ /^GENRST_SHOW_COMMAND$/
        cmd_lines = read_until_genrst_eof(input_handle)
        show_command(cmd_lines, output_handle)

      elsif content_line =~ /^GENRST_INCLUDE_ESCAPED\(([^)]+)\)$/
        included_file_name = $1
        include_escaped(included_file_name, output_handle)

      elsif content_line =~ /^GENRST_INCLUDE_AND_RUN_ESCAPED\(([^)]+)\)$/
        included_file_name = $1
        cmd_lines = File.readlines(included_file_name).map{|line| line.chomp}
        run_command(cmd_lines, output_handle)

      elsif content_line =~ /^GENRST_RUN_CONTENT_GENERATOR\(([^)]+)\)$/
        cmd = $1
        run_content_generator(cmd, output_handle)

      elsif content_line =~ /^GENRST/
        raise "Unhandled genrst line #{content_line}"
        output_handle.write(content_line)

      else
        output_handle.write(content_line)
      end
    rescue EOFError
      break
    end
  end
end

# ----------------------------------------------------------------
def read_until_genrst_eof(input_handle)
  begin

    lines = []
    while true
      line = input_handle.readline.chomp
      if line == 'GENRST_EOF'
        break
      end
      lines << line
    end
    return lines

  rescue EOFError
    $stderr.puts "$0: did not find GENRST_EOF"
    exit 1
  end
end

# ----------------------------------------------------------------
# The command can be multi-line
def run_command(cmd_lines, output_handle)
  cmd = cmd_lines.join("\n")
  cmd_output = `#{cmd} 2>&1`
  status = $?.to_i
  if status != 0
    raise "\"#{cmd}\" exited with non-zero code #{status}."
  end
  write_card(cmd_lines, cmd_output.split(/\n/), output_handle)
end

# ----------------------------------------------------------------
def run_command_tolerating_error(cmd_lines, output_handle)
  cmd = cmd_lines.join("\n")
  cmd_output = `#{cmd} 2>&1`
  write_card(cmd_lines, cmd_output.split(/\n/), output_handle)
end

# ----------------------------------------------------------------
def include_escaped(included_file_name, output_handle)
  write_card([], File.readlines(included_file_name), output_handle).map{|line| line.chomp}
end

# ----------------------------------------------------------------
def show_command(cmd_lines, output_handle)
  # The command can be multi-line
  write_card(cmd_lines, [], output_handle)
end

# ----------------------------------------------------------------
def run_content_generator(cmd, output_handle)
  cmd_output = `#{cmd} 2>&1`
  status = $?.to_i
  if status != 0
    raise "\"#{cmd}\" exited with non-zero code #{status}."
  end
  output_handle.puts(cmd_output)
end

# ----------------------------------------------------------------
def write_card(command_lines, output_lines, output_handle)
  output_handle.puts(".. code-block:: none")
  if command_lines.length > 0
    output_handle.puts("   :emphasize-lines: 1-#{command_lines.length}") # 'hll' in _static/*.css
  end
  output_handle.puts

  command_lines.each do |command_line|
    # The callsite should do the "::", blank line, then this, then blank line
    # in order to adhere to Sphinx code-block syntax. (Another option would be
    # us here doing the ::, blank line, , then the content line, then the other
    # blank line.)
    output_handle.write('    ') # four leading spaces for Sphinx, on each line
    output_handle.puts(command_line)
  end

  output_lines.each do |output_line|
    # The callsite should do the "::", blank line, then this, then blank line
    # in order to adhere to Sphinx code-block syntax. (Another option would be
    # us here doing the ::, blank line, , then the content line, then the other
    # blank line.)
    output_handle.write('    ') # four leading spaces for Sphinx, on each line
    output_handle.puts(output_line)
  end

end

# ================================================================
main()
