Operating on all fields
=======================

Bulk rename of fields
----------------------------------------------------------------

Suppose you want to replace spaces with underscores in your column names:

GENRST_RUN_COMMAND
cat data/spaces.csv
GENRST_EOF

The simplest way is to use ``mlr rename`` with ``-g`` (for global replace, not just first occurrence of space within each field) and ``-r`` for pattern-matching (rather than explicit single-column renames):

GENRST_RUN_COMMAND
mlr --csv rename -g -r ' ,_'  data/spaces.csv
GENRST_EOF

GENRST_RUN_COMMAND
mlr --csv --opprint rename -g -r ' ,_'  data/spaces.csv
GENRST_EOF

You can also do this with a for-loop:

GENRST_RUN_COMMAND
cat data/bulk-rename-for-loop.mlr
GENRST_EOF

GENRST_RUN_COMMAND
mlr --icsv --opprint put -f data/bulk-rename-for-loop.mlr data/spaces.csv
GENRST_EOF

Search-and-replace over all fields
----------------------------------------------------------------

How to do ``$name = gsub($name, "old", "new")`` for all fields?

GENRST_RUN_COMMAND
cat data/sar.csv
GENRST_EOF

GENRST_RUN_COMMAND
cat data/sar.mlr
GENRST_EOF

GENRST_RUN_COMMAND
mlr --csv put -f data/sar.mlr data/sar.csv
GENRST_EOF

Full field renames and reassigns
----------------------------------------------------------------

Using Miller 5.0.0's map literals and assigning to ``$*``, you can fully generalize :ref:`mlr rename <reference-verbs-rename>`, :ref:`mlr reorder <reference-verbs-reorder>`, etc.

GENRST_RUN_COMMAND
cat data/small
GENRST_EOF

GENRST_INCLUDE_AND_RUN_ESCAPED(data/full-reorg.sh)
