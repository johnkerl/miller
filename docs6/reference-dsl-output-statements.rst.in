DSL reference: output statements
================================================================

You can **output** variable-values or expressions in **five ways**:

* **Assign** them to stream-record fields. For example, ``$cumulative_sum = @sum``. For another example, ``$nr = NR`` adds a field named ``nr`` to each output record, containing the value of the built-in variable ``NR`` as of when that record was ingested.

* Use the **print** or **eprint** keywords which immediately print an expression *directly to standard output or standard error*, respectively. Note that ``dump``, ``edump``, ``print``, and ``eprint`` don't output records which participate in ``then``-chaining; rather, they're just immediate prints to stdout/stderr. The ``printn`` and ``eprintn`` keywords are the same except that they don't print final newlines. Additionally, you can print to a specified file instead of stdout/stderr.

* Use the **dump** or **edump** keywords, which *immediately print all out-of-stream variables as a JSON data structure to the standard output or standard error* (respectively).

* Use **tee** which formats the current stream record (not just an arbitrary string as with **print**) to a specific file.

* Use **emit**/**emitp**/**emitf** to send out-of-stream variables' current values to the output record stream, e.g.  ``@sum += $x; emit @sum`` which produces an extra output record such as ``sum=3.1648382``.

For the first two options you are populating the output-records stream which feeds into the next verb in a ``then``-chain (if any), or which otherwise is formatted for output using ``--o...`` flags.

For the last three options you are sending output directly to standard output, standard error, or a file.

.. _reference-dsl-print-statements:

Print statements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``print`` statement is perhaps self-explanatory, but with a few light caveats:

* There are four variants: ``print`` goes to stdout with final newline, ``printn`` goes to stdout without final newline (you can include one using "\n" in your output string), ``eprint`` goes to stderr with final newline, and ``eprintn`` goes to stderr without final newline.

* Output goes directly to stdout/stderr, respectively: data produced this way do not go downstream to the next verb in a ``then``-chain. (Use ``emit`` for that.)

* Print statements are for strings (``print "hello"``), or things which can be made into strings: numbers (``print 3``, ``print $a + $b``, or concatenations thereof (``print "a + b = " . ($a + $b)``). Maps (in ``$*``, map-valued out-of-stream or local variables, and map literals) aren't convertible into strings. If you print a map, you get ``{is-a-map}`` as output. Please use ``dump`` to print maps.

* You can redirect print output to a file: ``mlr --from myfile.dat put 'print > "tap.txt", $x'`` ``mlr --from myfile.dat put 'o=$*; print > $a.".txt", $x'``.

* See also :ref:`reference-dsl-redirected-output-statements` for examples.

.. _reference-dsl-dump-statements:

Dump statements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``dump`` statement is for printing expressions, including maps, directly to stdout/stderr, respectively:

* There are two variants: ``dump`` prints to stdout; ``edump`` prints to stderr.

* Output goes directly to stdout/stderr, respectively: data produced this way do not go downstream to the next verb in a ``then``-chain. (Use ``emit`` for that.)

* You can use ``dump`` to output single strings, numbers, or expressions including map-valued data. Map-valued data are printed as JSON. Miller allows string and integer keys in its map literals while JSON allows only string keys, so use ``mlr put --jknquoteint`` if you want integer-valued map keys not double-quoted.

* If you use ``dump`` (or ``edump``) with no arguments, you get a JSON structure representing the current values of all out-of-stream variables.

* As with ``print``, you can redirect output to files.

* See also :ref:`reference-dsl-redirected-output-statements` for examples.

Tee statements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Records produced by a ``mlr put`` go downstream to the next verb in your ``then``-chain, if any, or otherwise to standard output.  If you want to additionally copy out records to files, you can do that using ``tee``.

The syntax is, by example, ``mlr --from myfile.dat put 'tee > "tap.dat", $*' then sort -n index``.  First is ``tee >``, then the filename expression (which can be an expression such as ``"tap.".$a.".dat"``), then a comma, then ``$*``. (Nothing else but ``$*`` is teeable.)

See also :ref:`reference-dsl-redirected-output-statements` for examples.

.. _reference-dsl-redirected-output-statements:

Redirected-output statements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The **print**, **dump** **tee**, **emitf**, **emit**, and **emitp** keywords all allow you to redirect output to one or more files or pipe-to commands. The filenames/commands are strings which can be constructed using record-dependent values, so you can do things like splitting a table into multiple files, one for each account ID, and so on.

Details:

* The ``print`` and ``dump`` keywords produce output immediately to standard output, or to specified file(s) or pipe-to command if present.

GENRST_RUN_COMMAND
mlr help keyword print
GENRST_EOF

GENRST_RUN_COMMAND
mlr help keyword dump
GENRST_EOF

* ``mlr put`` sends the current record (possibly modified by the ``put`` expression) to the output record stream. Records are then input to the following verb in a ``then``-chain (if any), else printed to standard output (unless ``put -q``). The **tee** keyword *additionally* writes the output record to specified file(s) or pipe-to command, or immediately to ``stdout``/``stderr``.

GENRST_RUN_COMMAND
mlr help keyword tee
GENRST_EOF

* ``mlr put``'s ``emitf``, ``emitp``, and ``emit`` send out-of-stream variables to the output record stream. These are then input to the following verb in a ``then``-chain (if any), else printed to standard output. When redirected with ``>``, ``>>``, or ``|``, they *instead* write the out-of-stream variable(s) to specified file(s) or pipe-to command, or immediately to ``stdout``/``stderr``.

GENRST_RUN_COMMAND
mlr help keyword emitf
GENRST_EOF

GENRST_RUN_COMMAND
mlr help keyword emitp
GENRST_EOF

GENRST_RUN_COMMAND
mlr help keyword emit
GENRST_EOF

.. _reference-dsl-emit-statements:

Emit statements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

There are three variants: ``emitf``, ``emit``, and ``emitp``. Keep in mind that out-of-stream variables are a nested, multi-level hashmap (directly viewable as JSON using ``dump``), whereas Miller output records are lists of single-level key-value pairs. The three emit variants allow you to control how the multilevel hashmaps are flatten down to output records. You can emit any map-valued expression, including ``$*``, map-valued out-of-stream variables, the entire out-of-stream-variable collection ``@*``, map-valued local variables, map literals, or map-valued function return values.

Use **emitf** to output several out-of-stream variables side-by-side in the same output record. For ``emitf`` these mustn't have indexing using ``@name[...]``. Example:

GENRST_RUN_COMMAND
mlr put -q '
  @count += 1;
  @x_sum += $x;
  @y_sum += $y;
  end { emitf @count, @x_sum, @y_sum}
' data/small
GENRST_EOF

Use **emit** to output an out-of-stream variable. If it's non-indexed you'll get a simple key-value pair:

GENRST_RUN_COMMAND
cat data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '@sum += $x; end { dump }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '@sum += $x; end { emit @sum }' data/small
GENRST_EOF

If it's indexed then use as many names after ``emit`` as there are indices:

GENRST_RUN_COMMAND
mlr put -q '@sum[$a] += $x; end { dump }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '@sum[$a] += $x; end { emit @sum, "a" }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '@sum[$a][$b] += $x; end { dump }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '@sum[$a][$b] += $x; end { emit @sum, "a", "b" }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '@sum[$a][$b][$i] += $x; end { dump }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '
  @sum[$a][$b][$i] += $x;
  end { emit @sum, "a", "b", "i" }
' data/small
GENRST_EOF

Now for **emitp**: if you have as many names following ``emit`` as there are levels in the out-of-stream variable's hashmap, then ``emit`` and ``emitp`` do the same thing. Where they differ is when you don't specify as many names as there are hashmap levels. In this case, Miller needs to flatten multiple map indices down to output-record keys: ``emitp`` includes full prefixing (hence the ``p`` in ``emitp``) while ``emit`` takes the deepest hashmap key as the output-record key:

GENRST_RUN_COMMAND
mlr put -q '@sum[$a][$b] += $x; end { dump }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '@sum[$a][$b] += $x; end { emit @sum, "a" }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '@sum[$a][$b] += $x; end { emit @sum }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '@sum[$a][$b] += $x; end { emitp @sum, "a" }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q '@sum[$a][$b] += $x; end { emitp @sum }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr --oxtab put -q '@sum[$a][$b] += $x; end { emitp @sum }' data/small
GENRST_EOF

Use **--oflatsep** to specify the character which joins multilevel
keys for ``emitp`` (it defaults to a colon):

GENRST_RUN_COMMAND
mlr put -q --oflatsep / '@sum[$a][$b] += $x; end { emitp @sum, "a" }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr put -q --oflatsep / '@sum[$a][$b] += $x; end { emitp @sum }' data/small
GENRST_EOF

GENRST_RUN_COMMAND
mlr --oxtab put -q --oflatsep / '
  @sum[$a][$b] += $x;
  end { emitp @sum }
' data/small
GENRST_EOF

Multi-emit statements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can emit **multiple map-valued expressions side-by-side** by
including their names in parentheses:

GENRST_INCLUDE_AND_RUN_ESCAPED(data/emit-lashed.sh)

What this does is walk through the first out-of-stream variable (``@x_sum`` in this example) as usual, then for each keylist found (e.g. ``pan,wye``), include the values for the remaining out-of-stream variables (here, ``@x_count`` and ``@x_mean``). You should use this when all out-of-stream variables in the emit statement have **the same shape and the same keylists**.

Emit-all statements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use **emit all** (or ``emit @*`` which is synonymous) to output all out-of-stream variables. You can use the following idiom to get various accumulators output side-by-side (reminiscent of ``mlr stats1``):

GENRST_RUN_COMMAND
mlr --from data/small --opprint put -q '
  @v[$a][$b]["sum"] += $x;
  @v[$a][$b]["count"] += 1;
  end{emit @*,"a","b"}
'
GENRST_EOF

GENRST_RUN_COMMAND
mlr --from data/small --opprint put -q '
  @sum[$a][$b] += $x;
  @count[$a][$b] += 1;
  end{emit @*,"a","b"}
'
GENRST_EOF

GENRST_RUN_COMMAND
mlr --from data/small --opprint put -q '
  @sum[$a][$b] += $x;
  @count[$a][$b] += 1;
  end{emit (@sum, @count),"a","b"}
'
GENRST_EOF

