// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"mlr/src/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 319
	NumSymbols = 546
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '"'
3: '"'
4: 'i'
5: '0'
6: 'x'
7: '0'
8: 'b'
9: '.'
10: '.'
11: '-'
12: '.'
13: '.'
14: '-'
15: '.'
16: '.'
17: '-'
18: 'M'
19: '_'
20: 'P'
21: 'I'
22: 'M'
23: '_'
24: 'E'
25: 'n'
26: 'u'
27: 'l'
28: 'l'
29: 'I'
30: 'P'
31: 'S'
32: 'I'
33: 'F'
34: 'S'
35: 'I'
36: 'R'
37: 'S'
38: 'O'
39: 'P'
40: 'S'
41: 'O'
42: 'F'
43: 'S'
44: 'O'
45: 'R'
46: 'S'
47: 'O'
48: 'F'
49: 'L'
50: 'A'
51: 'T'
52: 'S'
53: 'E'
54: 'P'
55: 'N'
56: 'F'
57: 'N'
58: 'R'
59: 'F'
60: 'N'
61: 'R'
62: 'F'
63: 'I'
64: 'L'
65: 'E'
66: 'N'
67: 'A'
68: 'M'
69: 'E'
70: 'F'
71: 'I'
72: 'L'
73: 'E'
74: 'N'
75: 'U'
76: 'M'
77: 'E'
78: 'N'
79: 'V'
80: 'b'
81: 'e'
82: 'g'
83: 'i'
84: 'n'
85: 'd'
86: 'o'
87: 'e'
88: 'l'
89: 'i'
90: 'f'
91: 'e'
92: 'l'
93: 's'
94: 'e'
95: 'e'
96: 'n'
97: 'd'
98: 'f'
99: 'i'
100: 'l'
101: 't'
102: 'e'
103: 'r'
104: 'f'
105: 'o'
106: 'r'
107: 'i'
108: 'f'
109: 'i'
110: 'n'
111: 'w'
112: 'h'
113: 'i'
114: 'l'
115: 'e'
116: 'b'
117: 'r'
118: 'e'
119: 'a'
120: 'k'
121: 'c'
122: 'o'
123: 'n'
124: 't'
125: 'i'
126: 'n'
127: 'u'
128: 'e'
129: 'r'
130: 'e'
131: 't'
132: 'u'
133: 'r'
134: 'n'
135: 'f'
136: 'u'
137: 'n'
138: 'c'
139: 's'
140: 'u'
141: 'b'
142: 'r'
143: 'c'
144: 'a'
145: 'l'
146: 'l'
147: 'a'
148: 'r'
149: 'r'
150: 'b'
151: 'o'
152: 'o'
153: 'l'
154: 'f'
155: 'l'
156: 'o'
157: 'a'
158: 't'
159: 'i'
160: 'n'
161: 't'
162: 'm'
163: 'a'
164: 'p'
165: 'n'
166: 'u'
167: 'm'
168: 's'
169: 't'
170: 'r'
171: 'v'
172: 'a'
173: 'r'
174: 'u'
175: 'n'
176: 's'
177: 'e'
178: 't'
179: 'd'
180: 'u'
181: 'm'
182: 'p'
183: 'e'
184: 'd'
185: 'u'
186: 'm'
187: 'p'
188: 'e'
189: 'm'
190: 'i'
191: 't'
192: 'e'
193: 'm'
194: 'i'
195: 't'
196: 'p'
197: 'e'
198: 'm'
199: 'i'
200: 't'
201: 'f'
202: 'e'
203: 'p'
204: 'r'
205: 'i'
206: 'n'
207: 't'
208: 'e'
209: 'p'
210: 'r'
211: 'i'
212: 'n'
213: 't'
214: 'n'
215: 'p'
216: 'r'
217: 'i'
218: 'n'
219: 't'
220: 'p'
221: 'r'
222: 'i'
223: 'n'
224: 't'
225: 'n'
226: 't'
227: 'e'
228: 'e'
229: 's'
230: 't'
231: 'd'
232: 'o'
233: 'u'
234: 't'
235: 's'
236: 't'
237: 'd'
238: 'e'
239: 'r'
240: 'r'
241: '$'
242: '$'
243: '{'
244: '}'
245: '$'
246: '*'
247: '@'
248: '@'
249: '{'
250: '}'
251: '@'
252: '*'
253: 'a'
254: 'l'
255: 'l'
256: '%'
257: '%'
258: '%'
259: 'p'
260: 'a'
261: 'n'
262: 'i'
263: 'c'
264: '%'
265: '%'
266: '%'
267: ';'
268: '{'
269: '}'
270: '='
271: '>'
272: '>'
273: '>'
274: '|'
275: ','
276: '('
277: ')'
278: '$'
279: '['
280: ']'
281: '$'
282: '['
283: '['
284: '$'
285: '['
286: '['
287: '['
288: '@'
289: '['
290: '|'
291: '|'
292: '='
293: '^'
294: '^'
295: '='
296: '&'
297: '&'
298: '='
299: '?'
300: '?'
301: '='
302: '?'
303: '?'
304: '?'
305: '='
306: '|'
307: '='
308: '&'
309: '='
310: '^'
311: '='
312: '<'
313: '<'
314: '='
315: '>'
316: '>'
317: '='
318: '>'
319: '>'
320: '>'
321: '='
322: '+'
323: '='
324: '.'
325: '='
326: '-'
327: '='
328: '*'
329: '='
330: '/'
331: '='
332: '/'
333: '/'
334: '='
335: '%'
336: '='
337: '*'
338: '*'
339: '='
340: '?'
341: ':'
342: '|'
343: '|'
344: '^'
345: '^'
346: '&'
347: '&'
348: '?'
349: '?'
350: '?'
351: '?'
352: '?'
353: '='
354: '~'
355: '!'
356: '='
357: '~'
358: '='
359: '='
360: '!'
361: '='
362: '>'
363: '='
364: '<'
365: '<'
366: '='
367: '^'
368: '&'
369: '<'
370: '<'
371: '>'
372: '>'
373: '>'
374: '+'
375: '-'
376: '.'
377: '+'
378: '.'
379: '-'
380: '.'
381: '*'
382: '/'
383: '/'
384: '/'
385: '%'
386: '.'
387: '*'
388: '.'
389: '/'
390: '.'
391: '/'
392: '/'
393: '!'
394: '~'
395: '*'
396: '*'
397: '['
398: '['
399: '['
400: '['
401: '['
402: '['
403: '_'
404: '_'
405: ' '
406: '!'
407: '#'
408: '$'
409: '%'
410: '&'
411: '''
412: '\'
413: '('
414: ')'
415: '*'
416: '+'
417: ','
418: '-'
419: '.'
420: '/'
421: ':'
422: ';'
423: '<'
424: '='
425: '>'
426: '?'
427: '@'
428: '['
429: ']'
430: '^'
431: '_'
432: '`'
433: '{'
434: '|'
435: '}'
436: '~'
437: '\'
438: '\'
439: '\'
440: '"'
441: '\'
442: '['
443: '\'
444: ']'
445: '\'
446: 'b'
447: '\'
448: 'f'
449: '\'
450: 'n'
451: '\'
452: 'r'
453: '\'
454: 't'
455: '\'
456: 'x'
457: '\'
458: '.'
459: '\'
460: '0'
461: '\'
462: '1'
463: '\'
464: '2'
465: '\'
466: '3'
467: '\'
468: '4'
469: '\'
470: '5'
471: '\'
472: '6'
473: '\'
474: '7'
475: '\'
476: '8'
477: '\'
478: '9'
479: 'e'
480: 'E'
481: 't'
482: 'r'
483: 'u'
484: 'e'
485: 'f'
486: 'a'
487: 'l'
488: 's'
489: 'e'
490: ' '
491: '!'
492: '#'
493: '$'
494: '%'
495: '&'
496: '''
497: '\'
498: '('
499: ')'
500: '*'
501: '+'
502: ','
503: '-'
504: '.'
505: '/'
506: ':'
507: ';'
508: '<'
509: '='
510: '>'
511: '?'
512: '@'
513: '['
514: ']'
515: '^'
516: '_'
517: '`'
518: '|'
519: '~'
520: '\'
521: '{'
522: '\'
523: '}'
524: ' '
525: '\t'
526: '\n'
527: '\r'
528: '#'
529: '\n'
530: 'a'-'z'
531: 'A'-'Z'
532: '0'-'9'
533: '0'-'9'
534: 'a'-'f'
535: 'A'-'F'
536: '0'-'1'
537: 'A'-'Z'
538: 'a'-'z'
539: '0'-'9'
540: \u0100-\U0010ffff
541: 'A'-'Z'
542: 'a'-'z'
543: '0'-'9'
544: \u0100-\U0010ffff
545: .
*/
