mlr -n put '
  end {

    print "================================================================ ARRAY";
    my_array = [2, 9, 10, 3, 1, 4, 5, 8, 7, 6];
    print my_array;

    print;
    print "---------------------------------------------------------------- SELECT ARRAY";
    print select(my_array, func (e) { return e % 2 == 0});
    print select(my_array, func (e) { return e % 2 == 1});

    print;
    print "---------------------------------------------------------------- APPLY ARRAY";
    print apply(my_array, func(e) { return e**2 });
    print apply(my_array, func(e) { return e**3 });
    print sort(apply(my_array, func(e) { return e**3 }));

    print;
    print "---------------------------------------------------------------- REDUCE ARRAY";
    print reduce(my_array, func (acc,e) { return acc });
    print reduce(my_array, func (acc,e) { return e });
    print reduce(my_array, func (acc,e) { return acc+e });
    print reduce(my_array, func (acc,e) { return acc*e });
    print reduce(my_array, func (acc,e) { return acc. "," . e });

    print;
    print "---------------------------------------------------------------- FOLD ARRAY";
    print fold(my_array, func (acc,e) { return acc }, 1000000);
    print fold(my_array, func (acc,e) { return e }, 1000000);
    print fold(my_array, func (acc,e) { return acc+e }, 1000000);
    print fold(my_array, func (acc,e) { return acc*e }, 1000000);
    print fold(my_array, func (acc,e) { return acc . "," . e }, "prefix");

    print;
    print "---------------------------------------------------------------- SORT ARRAY";
    print sort(my_array);
    print sort(my_array, func(a,b) { return b-a});

    print;
    print "================================================================ MAP";
    my_map = {"cubit": 823, "dale": 13, "apple": 199, "ember": 191, "bottle": 107};

    print;
    print "---------------------------------------------------------------- SELECT MAP";
    print my_map;
    print select(my_map, func (k,v) { return v % 10 < 5});
    print select(my_map, func (k,v) { return v % 10 >= 5});

    print;
    print "---------------------------------------------------------------- APPLY MAP";
    print my_map;
    print apply(my_map, func(k,v) { return {k: v**2} });
    print apply(my_map, func(k,v) { return {k: v % 11} });
    print sort(apply(my_map, func(k,v) { return {toupper(k): v**3}}));

    print;
    print "---------------------------------------------------------------- REDUCE MAP";
    print my_map;
    print reduce(my_map, func (acck,accv,ek,ev) { return {acck: acck} });
    print reduce(my_map, func (acck,accv,ek,ev) { return {accv: accv}});
    print reduce(my_map, func (acck,accv,ek,ev) { return {acck: accv}});
    print reduce(my_map, func (acck,accv,ek,ev) { return {ek: ev}});
    print reduce(my_map, func (acck,accv,ek,ev) { return {ek: ek} });
    print reduce(my_map, func (acck,accv,ek,ev) { return {ev: ev}});
    print reduce(my_map, func (acck,accv,ek,ev) { return {acck . "," . ek: accv . "," . ev}});
    print reduce(my_map, func (acck,accv,ek,ev) { return {"sum": accv + ev }});
    print reduce(my_map, func (acck,accv,ek,ev) { return {"product": accv * ev }});
    print reduce(my_map, func (acck,accv,ek,ev) { return {"joined": accv . "," . ev }});

    print;
    print "---------------------------------------------------------------- FOLD MAP";
    print fold(my_map, func (acck,accv,ek,ev) { return {acck : accv} }, {"hello" : "world"});
    print fold(my_map, func (acck,accv,ek,ev) { return {ek : ev}     }, {"hello" : 1000000});
    print fold(my_map, func (acck,accv,ek,ev) { return {ek : accv . "," . ev} }, {"prefix": "wut"});
    print fold(my_map, func (acck,accv,ek,ev) { return {acck . ",". ek : accv . "," . ev} }, {"prefix": "wut"});
    print fold(my_map, func (acck,accv,ek,ev) { return {ek : accv + ev }}, {"sum":1000000});
    print fold(my_map, func (acck,accv,ek,ev) { return {ek : accv * ev }}, {"product":1000000});

    print;
    print "---------------------------------------------------------------- SORT MAP";
    print my_map;
    print sort(my_map);
    print sort(my_map, func(ak,av,bk,bv) { return ak <=> bk});
    print sort(my_map, func(ak,av,bk,bv) { return bk <=> ak});
    print sort(my_map, func(ak,av,bk,bv) { return av <=> bv});
    print sort(my_map, func(ak,av,bk,bv) { return bv <=> av});

  }
'
