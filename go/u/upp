#!/usr/bin/env ruby

require 'fileutils'

$us = File.basename $0

# ----------------------------------------------------------------
def usage()
  $stderr.puts "Usage: #{$us} {newdir}"
  exit 1
end

# ----------------------------------------------------------------
usage unless ARGV.length == 1
newdir = ARGV[0]

FileUtils.mkdir_p newdir

n = 0
while true
  begin
    cmd_file_line = $stdin.readline
  rescue EOFError
    break
  end
  cmd_file_line.chomp!

  next if cmd_file_line =~ /^\s*$/
  next if cmd_file_line =~ /^#.*$/
  next if cmd_file_line =~ /^announce.*$/
  next if cmd_file_line =~ /^mention.*$/

  should_fail = false
  here_doc_lines = nil
  script_file_lines = nil
  if cmd_file_line =~ /^run_mlr.*$/
    cmd_file_line = cmd_file_line.sub("run_mlr", "mlr")
  elsif cmd_file_line =~ /^mlr_expect_fail.*$/
    cmd_file_line = cmd_file_line.sub("mlr_expect_fail", "mlr")
    should_fail = true
  else
    $stderr.puts "#{$us}: cannot handle cmd_file_line: #{cmd_file_line}"
    exit 1
  end
  cmd_file_line = cmd_file_line.gsub("\$indir", "reg-test/input")

  if cmd_file_line =~ /.*<<EOF$/
    cmd_file_line = cmd_file_line.sub("<<EOF", "")
    cmd_file_line.strip!
    here_doc_lines = []
    while true
      begin
        here_doc_line = $stdin.readline
      rescue EOFError
        $stderr.puts "Premature EOF"
        exit 1
      end
      if here_doc_line =~ /^EOF$/
        break
      end
      here_doc_lines << here_doc_line
    end
  end

  if cmd_file_line =~ /'$/ && !(cmd_file_line =~ /'.*'$/)
    cmd_file_line = cmd_file_line.sub(/'$/, "")
    cmd_file_line.strip!
    script_file_lines = []
    while true
      begin
        script_file_line = $stdin.readline
      rescue EOFError
        $stderr.puts "Premature EOF"
        exit 1
      end
      if script_file_line =~ /'$/
        script_file_lines << script_file_line.sub(/'$/, "")
        break
      end
      script_file_lines << script_file_line
    end
  end

  # TODO:
  # export VAR=value

  n += 1
  base = newdir + "/" + sprintf("%04d", n)
  cmd_file_name = base + '.cmd'
  input_file_name = base + '.input'
  script_file_name = base + '.mlr'

  if here_doc_lines != nil
    cmd_file_line += " " + input_file_name
  end
  if script_file_lines != nil
    cmd_file_line += " -f " + script_file_name
  end

  puts "-- #{cmd_file_name}"
  puts cmd_file_line
  puts

  File.open(cmd_file_name, "w") do |handle|
    handle.write(cmd_file_line)
    handle.write("\n")
  end

  if should_fail
    FileUtils.touch(base + '.should-fail')
  end

  if here_doc_lines != nil
    File.open(input_file_name, "w") do |handle|
      here_doc_lines.each do |here_doc_line|
        handle.write(here_doc_line)
      end
    end
  end

  if script_file_lines != nil
    File.open(script_file_name, "w") do |handle|
      script_file_lines.each do |script_file_line|
        handle.write(script_file_line)
      end
    end
  end

end
