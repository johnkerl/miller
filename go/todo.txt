================================================================
TOP OF LIST:

? twi-dm re all-contribs: all-contributors.org
* nikos materials -> fold in

* CSV BOM
* fmtnum
* localtime
* JSON comment-handling

* transpose
* print w/ #{...}; defer variadic printf

* r-strings/implicit-r/297: double-check end of reference-main-data-types.md.in

* mlr -k
* regtest pendings
  o webdocs re /..../i regex options @ CLIP for windows

* doc6
* check issues

* meta: nf,nr,keys?

* authoritative regex docs accompanied by thorough UT
  o expand existing regex webdoc
* authoritative time/localtime/tz docs accompanied by thorough UT
  o needs separate webdoc

* CASEDIR cmd -> mlr via env not oosvar

* punchdown list:
  o $cpw
    - 3 regex-at-CLI cases -- repro @ akns
  o $cpg
    ! csv bom

    ! fmtnum

    - merge-field voids

    - json comments

    - mapexcept ...
    - xtab crlf & non-std irs generally ...
    - pprint ofs -- ?
    - xtab ors -- ?
    - crlf ...

  o TODO in *.go & *.mi
  o release notes per se
  o ./configure whatever equivalent

d pre-release:
  o draft release w/ m6 binaries YYYYMMDD -- ?
  o gha download steps clearer

* wut h1 spacing before/after ...

----------------------------------------------------------------
LOCALTIME

! make optional tz args !
  -> separate PR
  sec2localtime  2nd
  sec2localdate  3rd ... w/ int 0 @ 2nd ... :(
  localtime2sec  2nd
  strptime_local 3rd
  strftime_local 3rd
  gmt2localtime  2nd
  localtime2gmt  2nd

* .6S bugfix -- separate PR -- ?

* new webdoc separate PR
  - incl https://github.com/johnkerl/miller/issues/331

* https://github.com/johnkerl/miller/issues/332
  o localtime2gmt and gmt2localtime
    --tz

----------------------------------------------------------------
398

kerl@joker-mbp.local[go]$ pv ~/tmp/zhuge.gz | mlr --prepipe "pigz -d" count -g a then sort -nr count then head
^C.8MiB 0:00:12 [3.21MiB/s] [===========>                                                              ] 17% ETA 0:00:55

kerl@joker-mbp.local[go]$ ^C
kerl@joker-mbp.local[go]$ ^C
kerl@joker-mbp.local[go]$ pv ~/tmp/zhuge.gz | mlr count -g a then sort -nr count then head
218MiB 0:00:09 [23.1MiB/s] [========================================================================>] 100%

----------------------------------------------------------------
META

nr, nf, keys
transpose ...

also: -colname syntax ... -x colname maybe into more verbs ...

----------------------------------------------------------------
SEPARATORS ETC

* force CSV IFS single-char at CLIP? or CSV setup? IFS1?
* document re auto in nim6.in
* xtab ifs/irs

----------------------------------------------------------------
REDIRECTS

regtest/cases-pending-go-port/dsl-redirects/0008/cmd

! no-remove-after option ...

new-in-miller-6: missings:
* dump syntax -- ?
* emittable constraints -- ?
* --auto -- ?

----------------------------------------------------------------
LOOK AT

--quote-all
mlr regtest regtest/cases-pending-go-port/io-rfc-csv/0013

--quote-original
mlr regtest regtest/cases-pending-go-port/io-rfc-csv/0014

bom
mlr regtest regtest/cases-pending-go-port/io-utf8-bom/0001

absents/void/err
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0006
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0007
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0010
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0011
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0012
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0013
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0014
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0023
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0024
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0027
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0028
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0039
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0040
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0041
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0042
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0043
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0045
mlr regtest regtest/cases-pending-go-port/mix-null-field-input/0046

fmtstr
mlr regtest regtest/cases-pending-go-port/verb-format-values/0003
mlr regtest regtest/cases-pending-go-port/verb-format-values/0004

race condition
mlr regtest regtest/cases-pending-go-port/verb-head-early-out

label order
mlr regtest regtest/cases-pending-go-port/verb-label/0010

----------------------------------------------------------------

BLOCKERS

? BIFs as FCFs?

* regtest:
  o convert regtest/cases-pending-windows
  o convert regtest/cases-pending-go-port

* localtime functions

* strptime w/ ...00.Z -> error
* strptime/strftime experiments ...
  * verb sec2gmtdate
    - leaves non-numbers as-is -- ?
    - check sec2gmt as well -- ?
  * functions:
    sec2dhms sec2gmt sec2gmtdate sec2hms sec2localdate sec2localtime
    sec2localtime dhms2fsec dhms2sec fsec2dhms fsec2hms hms2fsec hms2sec
    localtime2sec gmt2sec strftime strftime_local strptime strptime_local
  ! strptime:
    strptime("1970-01-01T00:00:00.Z", "%Y-%m-%dT%H:%M:%SZ")
    (error)

* cases/dsl-min-max-types: cmp-matrices need to be fixed to follow the advertised rule for mixed types
  NUMERICS < BOOL < VOID < STRING

* 'string or int' -> 'string, int, or array thereof' throughout

* stats1: actualize -S and -F -- ?

* more I/O:
  ? golang encoding/csv ignores blank lines -- i need those for csvlite schema-change
    detection -- needs an input-stream delegator -- ?

----------------------------------------------------------------
DOC6

* kw olh for func and funct both

* hofs section on typedecls
  o hofs+typedecls RT cases
* glossary re natural ordering
  o separate webdoc section ... somewhere ...
  o hofs.md.in link
  o numerics < bool < string

? special-symbols-and-formatting: How to escape '?' in regexes? -> still true? link to torbiak297?
? dates-and-times: Caveat: localtime-handling in timezones with DST is still a work in progress -- fixed by torbiak?
e shell-commands: while-read example from issues
E reference-dsl-user-defined-functions: UDSes -> non-factorial example -- maybe some useful aggregator
reference-main-arithmetic: ? test stats1/step -F flag

reference-main-regular-expressions:
d separate escaping for "\t" etc in arg-2/regex position -- "\t"."\t" example as well ...

reference-dsl-control-structures:
e while (NR < 10) will never terminate as NR is only incremented between
  records -> and each expression is invoked once per record so once for NR=1,
  once for NR=2, etc.
E C-style triple-for loops: loop to NR -> NO!!!
l Since uninitialized out-of-stream variables default to 0 for
  addition/substraction and 1 for multiplication when they appear on expression
  right-hand sides (not quite as in awk, where they'd default to 0 either way)
  <-> xlink to other page

e fzf-ish w/ head -n 4, --from, up-arrow & append verb, then cat -- find & update the existing section
! https://github.com/johnkerl/miller/issues/653 -- stats1 w/ empties? check stats2
  - needs UTs as well

* while-read example from issues

* single-line JSON for DKVP/CSV/etc ...
  o mlr --j2x --no-auto-flatten cat $mlg/regtest/input/flatten-input-2.json
    - code: make sure this does single-line json ...
  o mlr --j2c --no-auto-flatten cat $mlg/regtest/input/flatten-input-2.json
    - code: this is ok ... maybe prefer single-line -- ?

* link to SE table ...
  https://github.com/johnkerl/miller/discussions/609#discussioncomment-1115715

* doc notes about --jknquotein & --jvquoteall. make sure they're ignore-accepted in the CLIP.

* file-formats:
  o NIDX link to headerless CSV
  o autodetect: tbd

* list at end of todo.txt

! readthedocs -- find out what's necessary to get per-version history
----------------------------------------------------------------

* mlr -k
  o c,go
  o various test cases
  o OLH re limitations
  o check JSON-parser x 2 -- is there really a 'restart'?
    - infinite-loop avoidance for sure

================================================================
NON-BLOCKERS

* non-streaming DSL-enabled cut
  https://github.com/johnkerl/miller/discussions/613

* single cheatsheet page -- put out RFH?
  https://twitter.com/icymi_py/status/1426622817785765898/photo/1

* mlrval_json -- get file/line in internal-coding-error detected

? $0 as raw-record string -- ? would make mlr grep simpler and more natural ...

* IIFEs: 'func f = (func(){ return udf})()'
* BIFs in non-sigil context (UDFs already are)
* non-top-level func defs

* non-lite DKVP reader/writer

* precedence for `:` in slicing syntax

* more of:
  o colored-shapes.dkvp -> csv; also mkdat2
  o data/small -> csv throughout. and/or just use example.csv

* json-triple-quote -- what can be done here?

* godoc neatens at func/const/etc level

* unarrayify function

* XYZWasSpecified -> XYZ = "default" w/ check-after -- ?

* parquet -- ?

* case auxfiles: cat them too

* uniqify-field-names in record-readers -- which issue?

* non-blocker: commenting passes ...

* non-blocker: array and string slices on LHS of assignments

* non-blocker: feature/shorthand for repl newline before prompt

* non-blocker: new functions:
  o new columns-to-arrays and arrays-to-columns for stan format

? gzout, bz2out -- ? make sure this works through tee? bleah ...
? zip -- but that is an archive case too not just an encoding case
  ? miller support for archive-traversal; directory-traversal even w/o zip -- ?
  ? as 6.1 follow-on work -- ?

* more about HTTP logs in miller -- doc and encapsulate:
  mlr --icsv --implicit-csv-header --ifs space --oxtab --from elb-log put -q 'print $27'
* PR-template etc checklists

* clean up TODO/xxx in src/platform
* mlr regtest doc -- focus on either go/regtest or go/src/auxents/regtest, one linking to the other
d type up a note somewhere in the regtest tree that all the .mlrs and the -f 00nn.mlr are for windows regtest

* also: write up how git status after test should show any missed extra-outs

* help-refactor:
  o audit for DEFAULT_FOOs @
  o audit for '-z {zzz}'
  o audit for consistent usage style

* new columns-to-arrays and arrays-to-columns for stan format

* https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/

* c/go both:
  o https://brandur.org/logfmt is simply DKVP w/ IFS = space (need dquot though)
  o https://docs.fluentbit.io/manual/pipeline/parsers/ltsv is just DKVP with IFS tab and IPS colon
* do some profiling every so often

* UDF nexts:
  o more functions (see below)
  o strmatch https://github.com/johnkerl/miller/issues/77#issuecomment-538790927
  o DSL sort function https://github.com/johnkerl/miller/issues/77#issuecomment-321916921

* bash completion script https://github.com/johnkerl/miller/issues/77#issuecomment-308247402
  https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial#:~:text=Bash%20completion%20is%20a%20functionality,key%20while%20typing%20a%20command.

* sliding-window averages into mapper step (C + Go)
* stats1 rank

* double-check rand-seeding
  o all rand invocations should go through the seeder for UT/other determinism

* comment-handling
  - delegator for CSV ...

! quoted NIDX
  - how with whitespace regex -- ?
! quoted DKVP
  - what about csvlite-style -- ? needs a --dkvplite ?
! pprint emit on schema change, not all-at-end.

* widen DSL coverage
  o err-return for array/map get/put if incorrect types ... currently go-void ...
    ! the DSL needs a full, written-down-and-published spell-out of error-eval semantics
  o profile mand.mlr & check for need for idx-assign
    -> most definitely needed
  o multiple-valued return/assign -- ?
    - array destructure at LHS for multi-retval assign (maps too?)

* UT per se for lrec ops

* libify errors.New callsites for DSL/CST
* record-readers are fully in-channel/loop; record-writers are multi with in-channel/loop being
  done by ChannelWriter, which is very small. opportunity to refactor.
* address all manner of xxx and TODO comments
* empty csv ... reminder ...

* functions as first-class objects; then sortaf/sortmf take f not "f"

* godoc notes:
  o go get golang.org/x/tools/cmd/godoc
  o dev mode:
    godoc -http=:6060 -goroot .
  o publish:
    godoc -http=:6060 -goroot .
    cd ~/tmp/bar
    wget -p -k http://localhost:6060/pkg
    mv localhost:6060 miller6
    file:///Users/kerl/tmp/bar/miller6/pkg
    maybe publish to ISP space

* het ifmt-reading
  - separate out InputFormat into per-file (or tbd) & have autodetect on file endings -- ?
  - maybe a TBD reader -- ?
  - InputFormat into Context
  - TBD writer -- defer factory until first context?
  - deeper refactor pulling format out of reader/writer options entirely -- ?

================================================================
MAYBES

* dotted-syntax support in verbs?

* repl as verb -- ?  'put --repl' maybe

* json-triple-quote -- what can be done here?

* non-blocker: _ variable feature?

* headerful/headerless mix -- ?
  TOptions as list, not single -- ?

* miller extensibility re golang plugins -- ?!?
  ? verbs ?
  ? DSL functions ?

* pkg graph:
  go get github.com/kisielk/godepgraph
  godepgraph miller | dot -Tpng -o ~/Desktop/mlrdeps.png
  flamegraph etc double-check

* more data formats:
  https://indico.cern.ch/event/613842/contributions/2585787/attachments/1463230/2260889/pivarski-data-formats.pdf

----------------------------------------------------------------
DEFER:
* parser-fu:
  o iterative LALR grok
- jackson notes
- gocc .txt/.go for simple grammars
o find/bookmark/grok rob's lexer slides
o iterate on a parser-generator with JSON config file
no need to bootstrap a parser for the parser-generator language

----------------------------------------------------------------
GOCC UPSTREAMS:

? support "abc" (not just 'a' 'b' 'c') in the lexer part

----------------------------------------------------------------
TBF:
* go 1.16 at some point
* tools/perf:
  o https://eng.uber.com/pprof-go-profiler/
  o profile mlr --j2x cat mappings.json
  o golang static-analysis tool -- ?
* iconv note
* AST insertions: make a simple NodeFromToken & have all interface{} be *ASTNode, not *token.Token
* cst printer with reflect.TypeOf -- ?
? makefile for build-dsl: if $bnf newer than productionstable.go
* I/O perf delta between C & Go is smaller for CSV, middle for DKVP, large for JSON -- debug
* neaten/error-proof:
  o mlrmapEntry -> own keys/mlrvals -- keep the kcopy/vcopy & be very clear,
    or remove. (keeping pointers allows nil-check which is good.)
  o inrec *types.Mlrmap is good for default no-copy across channels ... needs
    a big red flag though for things like the repeat verb (maybe *only* that one ...)
! clean up the AST API. ish! :^/
* json:
  d thorough UT for json mlrval-parser including various expect-fail error cases
  d doc re no jlistwrap on input if they want get streaming input
  d UT JSON-to-JSON cat-mapping should be identical
  d JSON-like accessor syntax in the grammar: $field[3]["bar"]
  d flatten/unflatten for non-JSON I/O formats -- maybe just double-quoted JSON strings -- ?
    - make a force-single-line writer
    - make a jsonparse DSL function -- ?
  d other formats: use JSON marshaler for collection types, maybe double-quoted
  o research gocc support
  o maybe a case for hand-roll
* ICE on scan of 0xffffffffffffffff
* support 0b0101 et al.? mlrdoc if so
? dsl/ast.go -> parsing/ast.go? then, put new-ast ctor -> parsing package
  o if so, update r.mds
* relnotes: label b,i,x vs x,i,b change
* double-check dump CR-terminators depending on expression type
* good example of wording for why/when to make a breaking release:
  https://webpack.js.org/blog/2020-10-10-webpack-5-release/
* unset, unassign, remove -- too many different names. also assign/put ... maybe stick w/ 2?
* huge commenting pass
* profile mlr sort
* go exe 17MB, wut. try to discover. (gocc presumably but verify.)
* fill-down make columns required. also, --all.
* check triple-dash at mlr fill-down-h ; check others
* clean up unused exitCode arg in sort/put usage.
  o also document pre/post conditions for flag and non-flag usages x all mappers
? emit @x or emit x -- should make k/v pairs w/ "x" & value -- ? check against C impl
i emitp/emitf -- note for-loops didn't appear until 4.1.0 & emits are much older (emitp 3.5.0).
  if i were starting clean-slate, i'd have had just a single `emit`.
* asserting_{type}: os.Exit(1) -> return nil, err flow?
* test put/filter w/ various combinations of -s/-e/-f
* mt_void keep-or-not .......
  o check dispo matrices
  o if keep, need careful MT_VOID at from-string constructor -- ? or not ?
  o comment clearly regardless
* bitwise_and_dispositions et al should not have _absn for collections -- _erro instead
* fmtnum: auto-replace %l_, %ll_ -> no l/ll for backwards compatibility, and comment accordingly
* ast-parex separate mlr auxents entrypoint?
* port u/window*.mlr from mlrc to mlrgo (actually, fix mlrgo of course)
* line/column caret at parse-error messages -- would require some GOCC refactoring
  in order to get the full DSL string and the line/number info into the same method
* csvlite rd/wr: comment for USV/ASV too. no need for escaping then.
* comment schema-change supported only in csvlite reader, not csv reader
* for-multi: C semantics 'k1: data k2: a:x v:1', sigh ...
* neaten mlr gap -g (default) print
! write out thorough min/max/cmp cases for all orderings by type
* silent zero-pass for-loops on non-collections:
  o intended as a heterogenity feature ...
  o consider a --errors or --strict mode; something
* note about non-determinism for DSL print/dump vs record output-stream now ...
* put/filter updates:
* [[...]] / [[[...]]]:
  o put '$array = [1,2,3,[4,5]]' is a syntax error unfortunately; need '$array = [1,2,3,[4,5] ]'
i https://en.wikipedia.org/wiki/Delimiter#Delimiter_collision
* reorder locations of get/put/remove methods in mlrval/mlrmap
* grep out all error message from regtest outputs & doc them all & make sure index-searchable at readthedocs
* short 'asserting' functions (absent/error); and/or put --strict or somesuch
* function metadata: auto-sort on mlr -f?
* --x2b @ help-doc .go; etc
? remove flagSet x all -- ? for consistency?
* os.Args[0] etc -> "mlr" throughout the codebase
* emitx later: 'emit([a,b,c],d,e,f)' for SR-conflict issues

* genmds multi-line something something for autogen of repl examples -- ?

* maybe split Context into varying & non-varying -- separate structs entirely

* idea: records as mlrmap -> mlrval?
  o reduce $* copy ...
  o opens the door to some (verb-subset) truly arbitrary-JSON processing ...

* mlr --opprint put $[[1]] = $[[2]]; unset $["a"] ./regtest/input/abixy
  o squint at pointer-handling
  o output varied after flatten-mods

* join
  > clean up VERBOSE in joiner-files
  > joinBucketKeeper & joinBucket need to be privatized
  > rewrite join-bucket-keeper.go entirely
  > also needs UT per se (not just regression)
* cli-doc --no-auto-flatten and --no-auto-unflatten
* note (fix? doc?) flatten of '$x={}' expands to nothing. not invertible.
* parex print regtest -- what about new ast-node types?
* all case-files could use top-notes
* dev-note on why `int` not `int64` -- processor-arch & those who most need it get it
* doc auto-flatten/auto-unflatten -- incl narrative from mlrcli_parse.go
* doc6: default flatsep is now "." not ":" in keeping with JSON culture
? allow [[...]] / [[[...]]] at assignment LHS

* readeropts/writeropts/readerwriteropts -> cliutil funcs
  o then put into join.go, put.go, & repl
* mlr inp parse error failstring retback?
* https://blog.golang.org/go1.13-errors
* split REPL lines on ';' -- ?
* tilde-expand for REPL load/open: if '~' is at the start of the string, run it though 'sh -c echo'
* doc shift/unshift as using [2:] and append
? ctx invars -> ptr w/ cmt
? string/array slices on assignment LHS -- ?
* beyond:
  o support 'x[1]["a"]' etc notation in various verbs?
  o sort within nested data structures?
  o array-sort, map-key sort, map-value sort in the DSL?
  o closures for sorting and more -- ?!?
  o or maybe just use UDFs ...
* optimize MlrvalLessThanForSort
  o mlr --cpuprofile cpu.pprof --from ~tmp/big sort -f a -nr x then nothing
  o GOGC=1000 mlr --cpuprofile cpu.pprof --from /Users/kerl/tmp/huge sort -f a -nr x then nothing
  o wc -l ~/tmp/big
    1000000 /Users/kerl/tmp/big
  o wc -l ~/tmp/huge
    10000000 /Users/kerl/tmp/huge
* optimize MlrvalGetMeanEB et al.
* data-copy reduction wup:
  o literal-type nodes -- now zero-copy
  x modify Evaluate to return pointer -- too much copying
  o wup for it was the binary-operator node, w/ the '*', that broke w/ no-output-copy & fibo UT
  o bonus: return MlrvalSqrt(MlrvalDivide(input1, input2))
  o type-gated mv -- should use passed-in storage slot -- ?
  o nice narrative write-up w/ the C stack-allocator problem, Go non-solution,
    profilng methods, GC readings/findings, before-and-after CST data structures,
    final perf results.
  o next round of data-copy reduction:
    - $z = min($x, $y) -- needs to return pointer to x or y
    o $z = $x + $y -- needs to have space for sum, and return pointer to it
    o therefore type BinaryFunc func(input1, input2 *Mlrval) *types.Mlrval
      > have the function z-allocate outputs when needed
      > the outputs must be on the stack, not statically allocated, to make them re-entrant
        and OK for recursive functions
      > var output types.Mlrval w/ field-setters, rather than return &Mlrval{... all of them ...}
    - then IEvaluable: Evaluate(state *runtime.State) *types.Mlrval
    - invalidate CopyFrom
    - check for under/over copy at Assign
    - global *ERROR / *ABSENT / etc
* for i, e in range c optimization -- always *copies* e
  o try and benchmark/compare ...
  o lots of array-of-pointer stuff, this is totally fine
  o take care w/ copying (non-pointer) mlrvals though
* more copy-on-retain for concurrent pointer-mods
  o make a thorough audit, and warn everywhere
  o either do copy for all retainers, or treat inrecs as immutable ...
  o 'this.recordsAndContexts.PushBack(inrecAndContext)' idiom needs copy everywhere ...
* consider -w/-W to stderr not stdout -- ?
* doc6 re warnings
* -W to mlr main also -- so it can be used with .mlrrc
* push/pop/shift/unshift functions
* 0035.cmd
  begin{@x=1} func f(x) { dump; print "hello"; tee  > ENV["outdir"]."/udf-x", $* } $o=f($i)

* zlib: n.b. brew install pigz, then pigz -z
* find a way to legitimize regtest/cases-non-windows for GHA
  - prepipe
  - system function

* regex-capture follow-on: https://github.com/johnkerl/miller/issues/388 is much cleaner
  o keep current syntax for backward compatibility
  o but encourage use of this

* put -T -- ?

----------------------------------------------------------------
DOC6:

* mlrdoc false && 4, true || 4 because of short-circuiting requirement
* error if UDF has same name as built-in
* more text examples in mlr-put doc
* window.mlr, window2.mlr -> doc somewhere
* doc: substr in inferred-numeric fields: https://github.com/johnkerl/miller/issues/290.
  o xref to 1-up note.
* document --jvstack is now the default; --no-jvstack
* doc about put -S/-F cannot make sense anymore
* why not flagSet. can't be supported everywhere, so don't confuse the user by
  supporting it some places and not others.
* back-incompat:
  mlr -n put $vflag '@x=1; dump > stdout, @x'
  mlr -n put $vflag '@x=1; dump > stdout @x'

* document tee -p

* why no flagSet:

	Unlike other transformers, we can't use flagSet here. The syntax of 'mlr
	sort' is it needs to take things like 'mlr sort -f a -n b -n c', i.e.
	first sort lexically on field a, then numerically on field b, then
	lexically on field c. The flagSet API would let the '-f c' clobber the
	'-f a', while we want both.

	Unlike other transformers, we can't use flagSet here. The syntax of 'mlr put'
	and 'mlr filter' is they need to be able to take -f and/or -e more than
	once, and Go flags can't handle that.

* doc re multi-load: can't '$x >' and '3' in separate -f anymore. no worries.
* sec2gmt --millis/--micros/--nanos doc
* sort-within-records --recursive doc

* docs nest simplers now that we have getoptish
* mongo examples to doc :D
* doclink re https://readthedocs.org/projects/miller/ & https://github.com/johnkerl/miller/settings/hooks
* dotted-map doc ...
  o $*.foo["bar"] = NR b04k b/c precedence :(
  o change precedence?

? * would LOVE to have small prev-page/next-page links at the *top* not bottom ...
  https://squidfunk.github.io/mkdocs-material/customization/#extending-the-theme

* go test single files:
  $ go test src/types/mlrval_functions_test.go $(ls src/types/*.go | grep -v test)
  ok   command-line-arguments 0.100s
  $ lsr \*test\*.go
  ./regression_test.go
  ./src/types/mlrval_functions_test.go
  ./src/types/mlrval_format_test.go
  ./src/auxents/regtest/regtester.go
  ./src/lib/regex_test.go
  ./src/lib/unbackslash_test.go
  $ go test src/types/mlrval_functions_test.go $(ls src/types/*.go|grep -v test)
  ok   command-line-arguments 0.097s
  $ go test src/types/mlrval_format_test.go $(ls src/types/*.go|grep -v test)
  ok   command-line-arguments 0.093s
  $ go test src/lib/regex_test.go src/lib/regex.go
  ok   command-line-arguments 0.083s
  $ go test src/lib/unbackslash_test.go src/lib/unbackslash.go
  ok   command-line-arguments 0.081s

================================================================
godoc checklist:

12   ./src/platform/shellrun_notwindows.go
17   ./src/platform/getargs_notwindows.go
20   ./src/input/record_reader.go
26   ./src/input/record_reader_factory.go
28   ./src/output/record_writer_factory.go
41   ./src/output/record_writer_nidx.go
42   ./src/lib/rand.go
42   ./src/lib/time.go
43   ./src/lib/unbackslash_test.go
48   ./src/output/record_writer_dkvp.go
49   ./src/runtime/state.go
51   ./src/output/channel_writer.go
51   ./src/platform/shellrun_windows.go
54   ./src/auxents/repl/ast.go
59   ./src/auxents/repl/types.go
64   ./src/cli/mlrcli_util.go
65   ./src/output/record_writer_xtab.go
66   ./src/climain/mlrcli.go
69   ./src/auxents/repl/prompt.go
71   ./src/lib/paragraph.go
72   ./src/cli/verb_utils.go
79   ./src/cli/flatten_unflatten.go
79   ./src/output/record_writer_markdown.go
86   ./src/stream/stream.go
88   ./src/output/record_writer_csv.go
88   ./src/output/record_writer_csvlite.go
89   ./src/lib/readfiles.go
91   ./src/auxents/lecat.go
95   ./src/auxents/auxents.go
95   ./src/auxents/unhex.go
95   ./src/lib/logger.go
96   ./src/lib/halfpipe.go
98   ./src/auxents/repl/dsl.go
104  ./src/auxents/regtest/invoker.go
108  ./src/output/record_writer_json.go
119  ./src/auxents/regtest/entry.go
127  ./src/climain/mlrcli_mlrrc.go
128  ./src/dsl/ast_types.go
128  ./src/input/record_reader_nidx.go
134  ./src/input/record_reader_dkvp.go
139  ./src/input/record_reader_json.go
140  ./src/platform/getargs_windows.go
148  ./src/entrypoint/entrypoint.go
149  ./src/auxents/termcvt.go
153  ./src/lib/ordered-map.go
157  ./src/auxents/hex.go
158  ./src/lib/unbackslash.go
161  ./src/lib/util.go
174  ./src/input/record_reader_xtab.go
176  ./src/auxents/repl/entry.go
190  ./src/lib/regex_test.go
202  ./src/cli/option_types.go
208  ./src/climain/mlrcli_parse.go
223  ./src/lib/file-readers.go
243  ./src/auxents/repl/session.go
256  ./src/input/record_reader_csv.go
278  ./src/lib/stats.go
280  ./src/dsl/ast_build.go
320  ./src/dsl/ast_print.go
331  ./src/output/record_writer_pprint.go
356  ./src/input/record_reader_csvlite.go
393  ./src/output/file-output-handlers.go
430  ./src/lib/mlrmath.go
493  ./src/cli/flag_types.go
509  ./src/runtime/stack.go
571  ./src/colorizer/colorizer.go
610  ./src/auxents/help/entry.go
820  ./src/auxents/regtest/regtester.go
1006 ./src/auxents/repl/verbs.go
2583 ./src/cli/option_parse.go

21  ./src/types/mlrval_functions_math.go
45  ./src/types/mlrval_functions_system.go
58  ./src/types/mlrmap_print.go
61  ./src/types/mlrval_function_hashing.go
72  ./src/types/mlrval_functions_random.go
100 ./src/types/mlrval_output.go
105 ./src/types/mlrval_typing.go
132 ./src/types/mlrmap.go
134 ./src/types/mlrval_functions_test.go
150 ./src/types/mlrval_functions_stats.go
157 ./src/types/mlrval.go
161 ./src/types/mlrval_functions_regex.go
170 ./src/types/mlrmap_json.go
178 ./src/types/context.go
179 ./src/types/mlrval_format.go
184 ./src/types/mlrval_functions_sort.go
187 ./src/types/mlrval_functions_base.go
201 ./src/types/mlrval_functions_mathlib.go
217 ./src/types/mlrval_functions_bits.go
240 ./src/types/mlrmap_flatten_unflatten.go
283 ./src/types/mlrval_functions_types.go
289 ./src/types/mlrval_accessors.go
299 ./src/types/mlrval_format_test.go
347 ./src/types/mlrval_functions_strings.go
464 ./src/types/mlrval_functions_booleans.go
515 ./src/types/mlrval_new.go
517 ./src/types/mlrval_functions_time.go
531 ./src/types/mlrval_json.go
656 ./src/types/mlrval_collections.go
857 ./src/types/mlrval_functions_collections.go
883 ./src/types/mlrmap_accessors.go
912 ./src/types/mlrval_functions_arithmetic.go

28  ./src/transformers/utils/join-bucket.go
40  ./src/transformers/aaa_record_transformer.go
79  ./src/transformers/aaa_chain_transformer.go
90  ./src/transformers/check.go
90  ./src/transformers/nothing.go
94  ./src/transformers/utils/top-keeper.go
98  ./src/transformers/tac.go
105 ./src/transformers/skip-trivial-records.go
111 ./src/transformers/fill-empty.go
112 ./src/transformers/regularize.go
116 ./src/transformers/sec2gmtdate.go
117 ./src/transformers/aaa_transformer_table.go
117 ./src/transformers/group-like.go
118 ./src/transformers/altkv.go
124 ./src/transformers/remove-empty-columns.go
128 ./src/transformers/label.go
130 ./src/transformers/sort-within-records.go
137 ./src/transformers/group-by.go
146 ./src/transformers/shuffle.go
148 ./src/transformers/template.go
151 ./src/transformers/tail.go
155 ./src/transformers/json-parse.go
156 ./src/transformers/count-similar.go
160 ./src/transformers/grep.go
165 ./src/transformers/decimate.go
165 ./src/transformers/unflatten.go
166 ./src/transformers/flatten.go
166 ./src/transformers/sec2gmt.go
171 ./src/transformers/bootstrap.go
174 ./src/transformers/json-stringify.go
179 ./src/transformers/head.go
181 ./src/transformers/gap.go
186 ./src/transformers/sample.go
189 ./src/transformers/clean-whitespace.go
190 ./src/transformers/tee.go
193 ./src/transformers/format-values.go
199 ./src/transformers/cat.go
199 ./src/transformers/unsparsify.go
201 ./src/transformers/repeat.go
212 ./src/transformers/seqgen.go
220 ./src/transformers/fill-down.go
234 ./src/transformers/count.go
243 ./src/transformers/rename.go
270 ./src/transformers/cut.go
279 ./src/transformers/most-or-least-frequent.go
280 ./src/transformers/fraction.go
281 ./src/transformers/top.go
305 ./src/transformers/utils/percentile-keeper.go
312 ./src/transformers/reorder.go
331 ./src/transformers/having-fields.go
338 ./src/transformers/bar.go
368 ./src/transformers/histogram.go
384 ./src/transformers/sort.go
395 ./src/transformers/stats1.go
432 ./src/transformers/reshape.go
469 ./src/transformers/stats2.go
511 ./src/transformers/put-or-filter.go
537 ./src/transformers/merge-fields.go
570 ./src/transformers/uniq.go
574 ./src/transformers/nest.go
603 ./src/transformers/step.go
604 ./src/transformers/join.go
667 ./src/transformers/utils/join-bucket-keeper.go
682 ./src/transformers/utils/stats1-accumulators.go
688 ./src/transformers/utils/stats2-accumulators.go

32   ./src/dsl/cst/signature.go
48   ./src/dsl/cst/env.go
73   ./src/dsl/cst/cond.go
78   ./src/dsl/cst/subroutines.go
89   ./src/dsl/cst/filter.go
90   ./src/dsl/cst/block-exit.go
112  ./src/dsl/cst/assignments.go
118  ./src/dsl/cst/statements.go
123  ./src/dsl/cst/types.go
135  ./src/dsl/cst/blocks.go
146  ./src/dsl/cst/if.go
154  ./src/dsl/cst/while.go
169  ./src/dsl/cst/evaluable.go
177  ./src/dsl/cst/tee.go
213  ./src/dsl/cst/emitf.go
222  ./src/dsl/cst/warn.go
230  ./src/dsl/cst/dump.go
276  ./src/dsl/cst/functions.go
300  ./src/dsl/cst/uds.go
353  ./src/dsl/cst/validate.go
376  ./src/dsl/cst/print.go
382  ./src/dsl/cst/udf.go
425  ./src/dsl/cst/root.go
552  ./src/dsl/cst/collections.go
578  ./src/dsl/cst/keyword_usage.go
684  ./src/dsl/cst/leaves.go
826  ./src/dsl/cst/builtin_functions.go
942  ./src/dsl/cst/for.go
1006 ./src/dsl/cst/emit_emitp.go
1141 ./src/dsl/cst/lvalues.go
1846 ./src/dsl/cst/builtin_function_manager.go

