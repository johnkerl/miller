# Record-heterogeneity

We think of CSV tables as rectangular: if there are 17 columns in the header then there are 17 columns for every row, else the data have a formatting error.

But heterogeneous data abound (today's no-SQL databases for example). Miller handles this.

## For I/O

### CSV and pretty-print

Miller simply prints a newline and a new header when there is a schema change. When there is no schema change, you get CSV per se as a special case. Likewise, Miller reads heterogeneous CSV or pretty-print input the same way. The difference between CSV and CSV-lite is that the former is RFC4180-compliant, while the latter readily handles heterogeneous data (which is non-compliant). For example:

GENMD_RUN_COMMAND
cat data/het.dkvp
GENMD_EOF

GENMD_RUN_COMMAND
mlr --ocsvlite cat data/het.dkvp
GENMD_EOF

GENMD_RUN_COMMAND
mlr --opprint cat data/het.dkvp
GENMD_EOF

Miller handles explicit header changes as just shown. If your CSV input contains ragged data -- if there are implicit header changes -- you can use ``--allow-ragged-csv-input`` (or keystroke-saver ``--ragged``). For too-short data lines, values are filled with empty string; for too-long data lines, missing field names are replaced with positional indices (counting up from 1, not 0), as follows:

GENMD_RUN_COMMAND
cat data/ragged.csv
GENMD_EOF

GENMD_RUN_COMMAND
mlr --icsv --oxtab --allow-ragged-csv-input cat data/ragged.csv
GENMD_EOF

You may also find Miller's ``group-like`` feature handy (see also [Verbs Reference](reference-verbs.md)):

GENMD_RUN_COMMAND
mlr --ocsvlite group-like data/het.dkvp
GENMD_EOF

GENMD_RUN_COMMAND
mlr --opprint group-like data/het.dkvp
GENMD_EOF

### Key-value-pair, vertical-tabular, and index-numbered formats

For these formats, record-heterogeneity comes naturally:

GENMD_RUN_COMMAND
cat data/het.dkvp
GENMD_EOF

GENMD_RUN_COMMAND
mlr --onidx --ofs ' ' cat data/het.dkvp
GENMD_EOF

GENMD_RUN_COMMAND
mlr --oxtab cat data/het.dkvp
GENMD_EOF

GENMD_RUN_COMMAND
mlr --oxtab group-like data/het.dkvp
GENMD_EOF

## For processing

Miller operates on specified fields and takes the rest along: for example, if you are sorting on the ``count`` field then all records in the input stream must have a ``count`` field but the other fields can vary, and moreover the sorted-on field name(s) don't need to be in the same position on each line:

GENMD_RUN_COMMAND
cat data/sort-het.dkvp
GENMD_EOF

GENMD_RUN_COMMAND
mlr sort -n count data/sort-het.dkvp
GENMD_EOF
