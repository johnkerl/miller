# Miller in 10 minutes

## Obtaining Miller

You can install Miller for various platforms as follows:

* Linux: `yum install miller` or `apt-get install miller` depending on your flavor of Linux
* MacOS: `brew install miller` or `port install miller` depending on your preference of [Homebrew](https://brew.sh) or [MacPorts](https://macports.org).
* Windows: `choco install miller`  using [Chocolatey](https://chocolatey.org).
* You can get latest builds for Linux, MacOS, and Windows by visiting [https://github.com/johnkerl/miller/actions](https://github.com/johnkerl/miller/actions).
, selecting the latest build, and clicking _Artifacts_. (These are retained for 5 days after each commit.)
* See also the [build page](build.md) if you prefer -- in particular, if your platform's package manager doesn't have the latest release.

As a first check, you should be able to run `mlr --version` at your system's command prompt and see something like the following:

GENMD_RUN_COMMAND
mlr --version
GENMD_EOF

As a second check, given [example.csv](./example.csv) you should be able to do

GENMD_RUN_COMMAND
mlr --csv cat example.csv
GENMD_EOF

GENMD_RUN_COMMAND
mlr --icsv --opprint cat example.csv
GENMD_EOF

If you run into issues on these checks, please check out the resources on the [community page](community.md) for help.

## Miller verbs

Let's take a quick look at some of the most useful Miller verbs -- file-format-aware, name-index-empowered equivalents of standard system commands.

`mlr cat` is like system `cat` (or `type` on Windows) -- it passes the data through unmodified:

GENMD_RUN_COMMAND
mlr --csv cat example.csv
GENMD_EOF

But `mlr cat` can also do format conversion -- for example, you can pretty-print in tabular format:

GENMD_RUN_COMMAND
mlr --icsv --opprint cat example.csv
GENMD_EOF

`mlr head` and `mlr tail` count records rather than lines. Whether you're getting the first few records or the last few, the CSV header is included either way:

GENMD_RUN_COMMAND
mlr --csv head -n 4 example.csv
GENMD_EOF

GENMD_RUN_COMMAND
mlr --csv tail -n 4 example.csv
GENMD_EOF

GENMD_RUN_COMMAND
mlr --icsv --ojson tail -n 2 example.csv
GENMD_EOF

You can sort on a single field:

GENMD_RUN_COMMAND
mlr --icsv --opprint sort -f shape example.csv
GENMD_EOF

Or, you can sort primarily alphabetically on one field, then secondarily numerically descending on another field, and so on:

GENMD_RUN_COMMAND
mlr --icsv --opprint sort -f shape -nr index example.csv
GENMD_EOF

If there are fields you don't want to see in your data, you can use `cut` to keep only the ones you want, in the same order they appeared in the input data:

GENMD_RUN_COMMAND
mlr --icsv --opprint cut -f flag,shape example.csv
GENMD_EOF

You can also use `cut -o` to keep specified fields, but in your preferred order:

GENMD_RUN_COMMAND
mlr --icsv --opprint cut -o -f flag,shape example.csv
GENMD_EOF

You can use `cut -x` to omit fields you don't care about:

GENMD_RUN_COMMAND
mlr --icsv --opprint cut -x -f flag,shape example.csv
GENMD_EOF

You can use `filter` to keep only records you care about:

GENMD_RUN_COMMAND
mlr --icsv --opprint filter '$color == "red"' example.csv
GENMD_EOF

GENMD_RUN_COMMAND
mlr --icsv --opprint filter '$color == "red" && $flag == true' example.csv
GENMD_EOF

You can use `put` to create new fields which are computed from other fields:

GENMD_RUN_COMMAND
mlr --icsv --opprint put '
  $ratio = $quantity / $rate;
  $color_shape = $color . "_" . $shape
' example.csv
GENMD_EOF

Even though Miller's main selling point is name-indexing, sometimes you really want to refer to a field name by its positional index. Use `$[[3]]` to access the name of field 3 or `$[[[3]]]` to access the value of field 3:

GENMD_RUN_COMMAND
mlr --icsv --opprint put '$[[3]] = "NEW"' example.csv
GENMD_EOF

GENMD_RUN_COMMAND
mlr --icsv --opprint put '$[[[3]]] = "NEW"' example.csv
GENMD_EOF

You can find the full list of verbs at the [Verbs Reference](reference-verbs.md) page.

## Multiple input files

Miller takes all the files from the command line as an input stream. But it's format-aware, so it doesn't repeat CSV header lines. For example, with input files [data/a.csv](data/a.csv and [data/b.csv](data/b.csv), the system `cat` command will repeat header lines:

GENMD_RUN_COMMAND
cat data/a.csv
GENMD_EOF

GENMD_RUN_COMMAND
cat data/b.csv
GENMD_EOF

GENMD_RUN_COMMAND
cat data/a.csv data/b.csv
GENMD_EOF

However, `mlr cat` will not:

GENMD_RUN_COMMAND
mlr --csv cat data/a.csv data/b.csv
GENMD_EOF

## Chaining verbs together

Often we want to chain queries together -- for example, sorting by a field and taking the top few values. We can do this using pipes:

GENMD_RUN_COMMAND
mlr --csv sort -nr index example.csv | mlr --icsv --opprint head -n 3
GENMD_EOF

This works fine -- but Miller also lets you chain verbs together using the word `then`. Think of this as a Miller-internal pipe that lets you use fewer keystrokes:

GENMD_RUN_COMMAND
mlr --icsv --opprint sort -nr index then head -n 3 example.csv
GENMD_EOF

As another convenience, you can put the filename first using `--from`. When you're interacting with your data at the command line, this makes it easier to up-arrow and append to the previous command:

GENMD_RUN_COMMAND
mlr --icsv --opprint --from example.csv sort -nr index then head -n 3
GENMD_EOF

GENMD_RUN_COMMAND
mlr --icsv --opprint --from example.csv \
  sort -nr index \
  then head -n 3 \
  then cut -f shape,quantity
GENMD_EOF

## Sorts and stats

Now suppose you want to sort the data on a given column, *and then* take the top few in that ordering. You can use Miller's `then` feature to pipe commands together.

Here are the records with the top three `index` values:

GENMD_RUN_COMMAND
mlr --icsv --opprint sort -nr index then head -n 3 example.csv
GENMD_EOF

Lots of Miller commands take a `-g` option for group-by: here, `head -n 1 -g shape` outputs the first record for each distinct value of the `shape` field. This means we're finding the record with highest `index` field for each distinct `shape` field:

GENMD_RUN_COMMAND
mlr --icsv --opprint sort -f shape -nr index then head -n 1 -g shape example.csv
GENMD_EOF

Statistics can be computed with or without group-by field(s):

GENMD_RUN_COMMAND
mlr --icsv --opprint --from example.csv \
  stats1 -a count,min,mean,max -f quantity -g shape
GENMD_EOF

GENMD_RUN_COMMAND
mlr --icsv --opprint --from example.csv \
  stats1 -a count,min,mean,max -f quantity -g shape,color
GENMD_EOF

If your output has a lot of columns, you can use XTAB format to line things up vertically for you instead:

GENMD_RUN_COMMAND
mlr --icsv --oxtab --from example.csv \
  stats1 -a p0,p10,p25,p50,p75,p90,p99,p100 -f rate
GENMD_EOF


## File formats and format conversion

Miller supports the following formats:

* CSV (comma-separared values)
* TSV (tab-separated values)
* JSON (JavaScript Object Notation)
* PPRINT (pretty-printed tabular)
* XTAB (vertical-tabular or sideways-tabular)
* NIDX (numerically indexed, label-free, with implicit labels `"1"`, `"2"`, etc.)
* DKVP (delimited key-value pairs).

What's a CSV file, really? It's an array of rows, or *records*, each being a list of key-value pairs, or *fields*: for CSV it so happens that all the keys are shared in the header line and the values vary from one data line to another.

For example, if you have:

GENMD_CARDIFY
shape,flag,index
circle,1,24
square,0,36
GENMD_EOF

then that's a way of saying:

GENMD_CARDIFY
shape=circle,flag=1,index=24
shape=square,flag=0,index=36
GENMD_EOF

Other ways to write the same data:

GENMD_CARDIFY
CSV                   PPRINT
shape,flag,index      shape  flag index
circle,1,24           circle 1    24
square,0,36           square 0    36

JSON                  XTAB
{                     shape circle
  "shape": "circle",  flag  1
  "flag": 1,          index 24
  "index": 24         .
}                     shape square
{                     flag  0
  "shape": "square",  index 36
  "flag": 0,
  "index": 36
}

DKVP
shape=circle,flag=1,index=24
shape=square,flag=0,index=36
GENMD_EOF

Anything we can do with CSV input data, we can do with any other format input data.  And you can read from one format, do any record-processing, and output to the same format as the input, or to a different output format.

How to specify these to Miller:

* If you use `--csv` or `--json` or `--pprint`, etc., then Miller will use that format for input and output.
* If you use `--icsv` and `--ojson` (note the extra `i` and `o`) then Miller will use CSV for input and JSON for output, etc.  See also [Keystroke Savers](keystroke-savers.md) for even shorter options like `--c2j`.

You can read more about this at the [File Formats](file-formats.md) page.

## Choices for printing to files

Often we want to print output to the screen. Miller does this by default, as we've seen in the previous examples.

Sometimes, though, we want to print output to another file. Just use **> outputfilenamegoeshere** at the end of your command:

<pre>
<b>mlr --icsv --opprint cat example.csv > newfile.csv</b>
# Output goes to the new file;
# nothing is printed to the screen.
</pre>

<pre>
<b>cat newfile.csv</b>
color  shape    flag     index quantity rate
yellow triangle true     11    43.6498  9.8870
red    square   true     15    79.2778  0.0130
red    circle   true     16    13.8103  2.9010
red    square   false    48    77.5542  7.4670
purple triangle false    51    81.2290  8.5910
red    square   false    64    77.1991  9.5310
purple triangle false    65    80.1405  5.8240
yellow circle   true     73    63.9785  4.2370
yellow circle   true     87    63.5058  8.3350
purple square   false    91    72.3735  8.2430
</pre>

Other times we just want our files to be **changed in-place**: just use **mlr -I**:

<pre>
<b>cp example.csv newfile.txt</b>
</pre>

<pre>
<b>cat newfile.txt</b>
color,shape,flag,index,quantity,rate
yellow,triangle,true,11,43.6498,9.8870
red,square,true,15,79.2778,0.0130
red,circle,true,16,13.8103,2.9010
red,square,false,48,77.5542,7.4670
purple,triangle,false,51,81.2290,8.5910
red,square,false,64,77.1991,9.5310
purple,triangle,false,65,80.1405,5.8240
yellow,circle,true,73,63.9785,4.2370
yellow,circle,true,87,63.5058,8.3350
purple,square,false,91,72.3735,8.2430
</pre>

<pre>
<b>mlr -I --csv sort -f shape newfile.txt</b>
</pre>

<pre>
<b>cat newfile.txt</b>
color,shape,flag,index,quantity,rate
red,circle,true,16,13.8103,2.9010
yellow,circle,true,73,63.9785,4.2370
yellow,circle,true,87,63.5058,8.3350
red,square,true,15,79.2778,0.0130
red,square,false,48,77.5542,7.4670
red,square,false,64,77.1991,9.5310
purple,square,false,91,72.3735,8.2430
yellow,triangle,true,11,43.6498,9.8870
purple,triangle,false,51,81.2290,8.5910
purple,triangle,false,65,80.1405,5.8240
</pre>

Also using `mlr -I` you can bulk-operate on lots of files: e.g.:

<pre>
<b>mlr -I --csv cut -x -f unwanted_column_name *.csv</b>
</pre>

If you like, you can first copy off your original data somewhere else, before doing in-place operations.

Lastly, using `tee` within `put`, you can split your input data into separate files per one or more field names:

GENMD_RUN_COMMAND
mlr --csv --from example.csv put -q 'tee > $shape.".csv", $*'
GENMD_EOF

GENMD_RUN_COMMAND
cat circle.csv
GENMD_EOF

GENMD_RUN_COMMAND
cat square.csv
GENMD_EOF

GENMD_RUN_COMMAND
cat triangle.csv
GENMD_EOF
