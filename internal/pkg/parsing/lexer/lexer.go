// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/johnkerl/miller/internal/pkg/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 324
	NumSymbols = 568
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '"'
3: '"'
4: 'i'
5: '0'
6: 'x'
7: '0'
8: 'o'
9: '0'
10: 'b'
11: '.'
12: '.'
13: '-'
14: '.'
15: '.'
16: '-'
17: '.'
18: '.'
19: '-'
20: 'M'
21: '_'
22: 'P'
23: 'I'
24: 'M'
25: '_'
26: 'E'
27: 'n'
28: 'u'
29: 'l'
30: 'l'
31: 'I'
32: 'P'
33: 'S'
34: 'I'
35: 'F'
36: 'S'
37: 'I'
38: 'R'
39: 'S'
40: 'O'
41: 'P'
42: 'S'
43: 'O'
44: 'F'
45: 'S'
46: 'O'
47: 'R'
48: 'S'
49: 'F'
50: 'L'
51: 'A'
52: 'T'
53: 'S'
54: 'E'
55: 'P'
56: 'N'
57: 'F'
58: 'N'
59: 'R'
60: 'F'
61: 'N'
62: 'R'
63: 'F'
64: 'I'
65: 'L'
66: 'E'
67: 'N'
68: 'A'
69: 'M'
70: 'E'
71: 'F'
72: 'I'
73: 'L'
74: 'E'
75: 'N'
76: 'U'
77: 'M'
78: 'E'
79: 'N'
80: 'V'
81: 'b'
82: 'e'
83: 'g'
84: 'i'
85: 'n'
86: 'd'
87: 'o'
88: 'e'
89: 'l'
90: 'i'
91: 'f'
92: 'e'
93: 'l'
94: 's'
95: 'e'
96: 'e'
97: 'n'
98: 'd'
99: 'f'
100: 'i'
101: 'l'
102: 't'
103: 'e'
104: 'r'
105: 'f'
106: 'o'
107: 'r'
108: 'i'
109: 'f'
110: 'i'
111: 'n'
112: 'w'
113: 'h'
114: 'i'
115: 'l'
116: 'e'
117: 'b'
118: 'r'
119: 'e'
120: 'a'
121: 'k'
122: 'c'
123: 'o'
124: 'n'
125: 't'
126: 'i'
127: 'n'
128: 'u'
129: 'e'
130: 'r'
131: 'e'
132: 't'
133: 'u'
134: 'r'
135: 'n'
136: 'f'
137: 'u'
138: 'n'
139: 'c'
140: 's'
141: 'u'
142: 'b'
143: 'r'
144: 'c'
145: 'a'
146: 'l'
147: 'l'
148: 'a'
149: 'r'
150: 'r'
151: 'b'
152: 'o'
153: 'o'
154: 'l'
155: 'f'
156: 'l'
157: 'o'
158: 'a'
159: 't'
160: 'i'
161: 'n'
162: 't'
163: 'm'
164: 'a'
165: 'p'
166: 'n'
167: 'u'
168: 'm'
169: 's'
170: 't'
171: 'r'
172: 'v'
173: 'a'
174: 'r'
175: 'f'
176: 'u'
177: 'n'
178: 'c'
179: 't'
180: 'u'
181: 'n'
182: 's'
183: 'e'
184: 't'
185: 'd'
186: 'u'
187: 'm'
188: 'p'
189: 'e'
190: 'd'
191: 'u'
192: 'm'
193: 'p'
194: 'e'
195: 'm'
196: 'i'
197: 't'
198: '1'
199: 'e'
200: 'm'
201: 'i'
202: 't'
203: 'e'
204: 'm'
205: 'i'
206: 't'
207: 'p'
208: 'e'
209: 'm'
210: 'i'
211: 't'
212: 'f'
213: 'e'
214: 'p'
215: 'r'
216: 'i'
217: 'n'
218: 't'
219: 'e'
220: 'p'
221: 'r'
222: 'i'
223: 'n'
224: 't'
225: 'n'
226: 'p'
227: 'r'
228: 'i'
229: 'n'
230: 't'
231: 'p'
232: 'r'
233: 'i'
234: 'n'
235: 't'
236: 'n'
237: 't'
238: 'e'
239: 'e'
240: 's'
241: 't'
242: 'd'
243: 'o'
244: 'u'
245: 't'
246: 's'
247: 't'
248: 'd'
249: 'e'
250: 'r'
251: 'r'
252: '$'
253: '$'
254: '{'
255: '}'
256: '$'
257: '*'
258: '@'
259: '@'
260: '{'
261: '}'
262: '@'
263: '*'
264: 'a'
265: 'l'
266: 'l'
267: '%'
268: '%'
269: '%'
270: 'p'
271: 'a'
272: 'n'
273: 'i'
274: 'c'
275: '%'
276: '%'
277: '%'
278: ';'
279: '{'
280: '}'
281: '='
282: '>'
283: '>'
284: '>'
285: '|'
286: ','
287: '('
288: ')'
289: '$'
290: '['
291: ']'
292: '$'
293: '['
294: '['
295: '$'
296: '['
297: '['
298: '['
299: '@'
300: '['
301: '|'
302: '|'
303: '='
304: '^'
305: '^'
306: '='
307: '&'
308: '&'
309: '='
310: '?'
311: '?'
312: '='
313: '?'
314: '?'
315: '?'
316: '='
317: '|'
318: '='
319: '&'
320: '='
321: '^'
322: '='
323: '<'
324: '<'
325: '='
326: '>'
327: '>'
328: '='
329: '>'
330: '>'
331: '>'
332: '='
333: '+'
334: '='
335: '.'
336: '='
337: '-'
338: '='
339: '*'
340: '='
341: '/'
342: '='
343: '/'
344: '/'
345: '='
346: '%'
347: '='
348: '*'
349: '*'
350: '='
351: '?'
352: ':'
353: '|'
354: '|'
355: '^'
356: '^'
357: '&'
358: '&'
359: '?'
360: '?'
361: '?'
362: '?'
363: '?'
364: '='
365: '~'
366: '!'
367: '='
368: '~'
369: '='
370: '='
371: '!'
372: '='
373: '<'
374: '='
375: '>'
376: '>'
377: '='
378: '<'
379: '<'
380: '='
381: '^'
382: '&'
383: '<'
384: '<'
385: '>'
386: '>'
387: '>'
388: '+'
389: '-'
390: '.'
391: '+'
392: '.'
393: '-'
394: '*'
395: '/'
396: '/'
397: '/'
398: '%'
399: '.'
400: '*'
401: '.'
402: '/'
403: '.'
404: '/'
405: '/'
406: '.'
407: '!'
408: '~'
409: '*'
410: '*'
411: '['
412: '['
413: '['
414: '['
415: '['
416: '['
417: '_'
418: '_'
419: ' '
420: '!'
421: '#'
422: '$'
423: '%'
424: '&'
425: '''
426: '\'
427: '('
428: ')'
429: '*'
430: '+'
431: ','
432: '-'
433: '.'
434: '/'
435: ':'
436: ';'
437: '<'
438: '='
439: '>'
440: '?'
441: '@'
442: '['
443: ']'
444: '^'
445: '_'
446: '`'
447: '{'
448: '|'
449: '}'
450: '~'
451: '\'
452: '\'
453: '\'
454: '"'
455: '\'
456: '['
457: '\'
458: ']'
459: '\'
460: 'b'
461: '\'
462: 'f'
463: '\'
464: 'n'
465: '\'
466: 'r'
467: '\'
468: 't'
469: '\'
470: 'x'
471: '\'
472: 'u'
473: '\'
474: 'U'
475: '\'
476: '.'
477: '\'
478: '*'
479: '\'
480: '0'
481: '\'
482: '1'
483: '\'
484: '2'
485: '\'
486: '3'
487: '\'
488: '4'
489: '\'
490: '5'
491: '\'
492: '6'
493: '\'
494: '7'
495: '\'
496: '8'
497: '\'
498: '9'
499: 'e'
500: 'E'
501: 't'
502: 'r'
503: 'u'
504: 'e'
505: 'f'
506: 'a'
507: 'l'
508: 's'
509: 'e'
510: ' '
511: '!'
512: '#'
513: '$'
514: '%'
515: '&'
516: '''
517: '\'
518: '('
519: ')'
520: '*'
521: '+'
522: ','
523: '-'
524: '.'
525: '/'
526: ':'
527: ';'
528: '<'
529: '='
530: '>'
531: '?'
532: '@'
533: '['
534: ']'
535: '^'
536: '_'
537: '`'
538: '|'
539: '~'
540: '\'
541: '{'
542: '\'
543: '}'
544: ' '
545: '\t'
546: '\n'
547: '\r'
548: '#'
549: '\n'
550: 'a'-'z'
551: 'A'-'Z'
552: \u0100-\U0010ffff
553: '0'-'9'
554: '0'-'9'
555: 'a'-'f'
556: 'A'-'F'
557: '0'-'7'
558: '0'-'1'
559: 'A'-'Z'
560: 'a'-'z'
561: '0'-'9'
562: \u0100-\U0010ffff
563: 'A'-'Z'
564: 'a'-'z'
565: '0'-'9'
566: \u0100-\U0010ffff
567: .
*/
